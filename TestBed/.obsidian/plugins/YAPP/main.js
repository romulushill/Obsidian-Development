/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => YAPP
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  DefaultName: "Root"
};
var YAPP = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon(
      "dice",
      "Sample Plugin",
      (evt) => {
        new import_obsidian.Notice("This is a notice!");
      }
    );
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const StatusBarNotice = this.addStatusBarItem();
    StatusBarNotice.setText("YAPP ACTIVE");
    this.addCommand({
      id: "rescan",
      name: "Re-Scan",
      callback: () => {
        console.log("Re-scanning the active directory for file changes...");
        new DisplayBox(
          this.app,
          "Re-Scanning",
          "Checking your active obsidian vault for file changes, appending any changes to the graph display."
        ).open();
        this.addPropertiesToAllFiles();
      }
    });
    this.addSettingTab(new SettingsTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(
      window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3)
    );
  }
  addPropertiesToAllFiles() {
    var _a;
    const allFiles = this.app.vault.getFiles();
    for (const file of allFiles) {
      if (file.extension === "md") {
        console.log(`${file.name} is a child of ${file.parent.name}`);
        const frontMatter = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
        if (frontMatter) {
          console.log("Front Matter:", frontMatter);
        }
        this.modifyFile(file, "\n---\nnew_property: new_value");
      } else {
        console.log(file.parent.name);
      }
    }
  }
  async modifyFile(file, newcontent) {
    var _a;
    const metadata = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    if (metadata) {
      metadata.new_property = "new_value";
      this.app.fileManager.processFrontMatter(
        file,
        (fm) => {
          fm.frontmatter = metadata;
          return fm;
        }
      );
    } else {
      console.log("No metadata found for the file.");
    }
  }
  onunload() {
    console.log("Unloading...");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var DisplayBox = class extends import_obsidian.Modal {
  constructor(app, Header, Message) {
    super(app);
    this.Header = Header;
    this.Message = Message;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: this.Header });
    contentEl.createEl("div", { text: this.Message });
    new import_obsidian.ButtonComponent(contentEl).setButtonText("Close").onClick(() => {
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "YAPP Settings Menu" });
    containerEl.createEl("h6", { text: "Yet Another Productivity Plugin", cls: "name_description" });
    new import_obsidian.Setting(containerEl).setName("Default Name").setDesc("Set the name for your root node").addText(
      (text) => text.setPlaceholder("Root Node Name").setValue(this.plugin.settings.DefaultName).onChange(async (value) => {
        this.plugin.settings.DefaultName = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
